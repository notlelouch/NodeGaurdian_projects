import { HardhatRuntimeEnvironment } from 'hardhat/types';
import * as zk from 'zksync-ethers';
import * as ethers from 'ethers';
import { AbstractDeployer } from './abstract-deployer';
import { ZkSyncArtifact } from './types';
export declare class DeployerExtension implements AbstractDeployer {
    private _hre;
    private _deploymentType?;
    private ethWeb3Provider?;
    private zkWeb3Provider?;
    private wallet?;
    constructor(_hre: HardhatRuntimeEnvironment, _deploymentType?: zk.types.DeploymentType | undefined);
    setDeploymentType(deploymentType: zk.types.DeploymentType): void;
    loadArtifact(contractNameOrFullyQualifiedName: string): Promise<ZkSyncArtifact>;
    deploy(contractNameOrArtifact: ZkSyncArtifact | string, constructorArguments?: any[], overrides?: ethers.Overrides, additionalFactoryDeps?: ethers.BytesLike[]): Promise<zk.Contract>;
    estimateDeployFee(artifact: ZkSyncArtifact, constructorArguments: any[]): Promise<bigint>;
    estimateDeployGas(artifact: ZkSyncArtifact, constructorArguments: any[]): Promise<bigint>;
    setWallet(wallet: zk.Wallet): void;
    getWallet(privateKeyOrAccountNumber?: string | number): Promise<zk.Wallet>;
}
//# sourceMappingURL=deployer-extension.d.ts.map